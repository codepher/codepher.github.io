{"title":"golang MPG","uid":"d26748d96534f511b1d6155a2f2aab74","slug":"notes/golang/golang MPG","date":"2021-04-12T16:00:00.000Z","updated":"2021-04-15T17:04:59.823Z","comments":true,"path":"api/articles/notes/golang/golang MPG.json","keywords":null,"cover":null,"content":"<h3 id=\"MPG\"><a href=\"#MPG\" class=\"headerlink\" title=\"MPG\"></a>MPG</h3><blockquote>\n<p><strong>M</strong> 指 <strong>Machine</strong>,一个 <strong>M</strong> 关联一个内核线程 由操作系统管理。</p>\n<blockquote>\n<p>数量问题：Go语言本身限定 M 的上限是1000，或在 runtime/debug 包中的 SetMaxThreads() 设置。</p>\n</blockquote>\n<blockquote>\n<p>M 动态创建，有一个 M 阻塞（goroutine）,会创建新的 M。如果有M空闲，会回收或眨眼</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p><strong>P</strong> 指 <strong>处理器(Processor)</strong>, 代表了 <strong>M</strong> 所需的上下文环境，也是处理用户级代码逻辑的处理器。负责衔接 <strong>M</strong> 和 <strong>G</strong> 的上下文调度，将等待执行的 <strong>G</strong> 与 <strong>M</strong> 对接。</p>\n<blockquote>\n<p>数量问题: 环境变量 $GOMAXPROCS，或在程序中通过 runtime.GOMAXPROCS(runtime.NumCPU())设置。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p><strong>G</strong> 指 <strong>Goroutine</strong>，本质是一种轻量级的线程。包括了调用栈，重要的调度信息，如 <strong>channel</strong> 等。</p>\n<blockquote>\n<p>创建 goroutine 栈内存消耗 2kb，运行过程中内存不够会自动扩容</p>\n</blockquote>\n<blockquote>\n<p>所有协程都是同级的，不分父子关系。</p>\n</blockquote>\n</blockquote>\n","text":"MPG M 指 Machine,一个 M 关联一个内核线程 由操作系统管理。 数量问题：Go语言本身限定 M 的上限是1000，或在 runtime/debug 包中的 SetMaxThreads() 设置。 M 动态创建，有一个 M 阻塞（goroutine）,会创建新的 M。...","link":"","photos":[],"count_time":{"symbolsCount":436,"symbolsTime":"1 mins."},"categories":[{"name":"golang","slug":"golang","count":1,"path":"api/categories/golang.json"}],"tags":[{"name":"golang","slug":"golang","count":3,"path":"api/tags/golang.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MPG\"><span class=\"toc-text\">MPG</span></a></li></ol>","author":{"name":"codepher","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"golang 三色标记法","uid":"2c3a451d05719ccf753049f1599af879","slug":"notes/golang/golang 三色标记法","date":"2021-04-16T16:00:00.000Z","updated":"2021-04-16T17:49:03.431Z","comments":true,"path":"api/articles/notes/golang/golang 三色标记法.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"codepher","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"vue 指令","uid":"138df3425b55dda1eb168080b56fe768","slug":"notes/vue/vue 指令","date":"2021-01-15T16:00:00.000Z","updated":"2021-01-16T08:03:43.734Z","comments":true,"path":"api/articles/notes/vue/vue 指令.json","keywords":null,"cover":null,"text":" v-for : 循环渲染 v-if : v-html : v-on : 注册事件 简写: @ 支持指令修饰符 @click.prevent 禁止默认事件 @click.stop 禁止冒泡 v-bind : 绑定动态属性 简写: : v-show : v-model : 双向绑定...","link":"","photos":[],"count_time":{"symbolsCount":221,"symbolsTime":"1 mins."},"categories":[{"name":"vue","slug":"vue","count":2,"path":"api/categories/vue.json"}],"tags":[{"name":"vue","slug":"vue","count":2,"path":"api/tags/vue.json"}],"author":{"name":"codepher","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}